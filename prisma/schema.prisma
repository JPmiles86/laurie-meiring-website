generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ai_content {
  id                                                                            String                     @id
  tenantId                                                                      String
  userId                                                                        String
  contentType                                                                   String
  title                                                                         String?
  status                                                                        String                     @default("draft")
  currentVersionId                                                              String?
  parentContentId                                                               String?
  metadata                                                                      Json                       @default("{}")
  createdAt                                                                     DateTime                   @default(now())
  updatedAt                                                                     DateTime
  publishedAt                                                                   DateTime?
  archivedAt                                                                    DateTime?
  ai_content                                                                    ai_content?                @relation("ai_contentToai_content", fields: [parentContentId], references: [id])
  other_ai_content                                                              ai_content[]               @relation("ai_contentToai_content")
  tenants                                                                       tenants                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users                                                                         users                      @relation(fields: [userId], references: [id])
  ai_content_critiques                                                          ai_content_critiques[]
  ai_content_interactions                                                       ai_content_interactions[]
  ai_content_relationships_ai_content_relationships_childContentIdToai_content  ai_content_relationships[] @relation("ai_content_relationships_childContentIdToai_content")
  ai_content_relationships_ai_content_relationships_parentContentIdToai_content ai_content_relationships[] @relation("ai_content_relationships_parentContentIdToai_content")
  ai_content_versions                                                           ai_content_versions[]
  ai_generation_sessions                                                        ai_generation_sessions[]
  ai_instruction_history                                                        ai_instruction_history[]
  content_performance_data                                                      content_performance_data[]
  content_quality_scores                                                        content_quality_scores[]
  content_workflow_state                                                        content_workflow_state?

  @@index([contentType])
  @@index([status])
  @@index([tenantId])
}

model ai_content_critiques {
  id                  String               @id
  contentId           String
  versionId           String?
  userId              String
  critiqueType        String
  specificFocus       String?
  severity            String
  originalText        String?
  suggestedText       String?
  reasoning           String?
  wasAccepted         Boolean?
  actualResolution    String?
  learningWeight      Float                @default(1.0)
  similarCritiques    String[]
  effectiveness       Float?
  createdAt           DateTime             @default(now())
  resolvedAt          DateTime?
  ai_content          ai_content           @relation(fields: [contentId], references: [id])
  ai_content_versions ai_content_versions? @relation(fields: [versionId], references: [id])

  @@index([contentId, critiqueType])
  @@index([userId, critiqueType])
}

model ai_content_interactions {
  id              String     @id
  contentId       String
  userId          String
  interactionType String
  duration        Int?
  sequence        Int
  contextData     Json       @default("{}")
  emotionalState  String?
  outcome         String?
  createdAt       DateTime   @default(now())
  ai_content      ai_content @relation(fields: [contentId], references: [id])

  @@index([contentId, userId])
  @@index([interactionType])
}

model ai_content_relationships {
  id                                                              String     @id
  parentContentId                                                 String
  childContentId                                                  String
  relationshipType                                                String
  strength                                                        Float      @default(1.0)
  metadata                                                        Json       @default("{}")
  createdAt                                                       DateTime   @default(now())
  ai_content_ai_content_relationships_childContentIdToai_content  ai_content @relation("ai_content_relationships_childContentIdToai_content", fields: [childContentId], references: [id])
  ai_content_ai_content_relationships_parentContentIdToai_content ai_content @relation("ai_content_relationships_parentContentIdToai_content", fields: [parentContentId], references: [id])

  @@unique([parentContentId, childContentId])
}

model ai_content_versions {
  id                        String                   @id
  contentId                 String
  versionNumber             Int
  contentData               Json
  generationParams          Json?
  instructions              String[]
  parentVersionId           String?
  changeSummary             String?
  createdBy                 String?
  createdAt                 DateTime                 @default(now())
  isPublished               Boolean                  @default(false)
  ai_content_critiques      ai_content_critiques[]
  ai_content                ai_content               @relation(fields: [contentId], references: [id], onDelete: Cascade)
  ai_content_versions       ai_content_versions?     @relation("ai_content_versionsToai_content_versions", fields: [parentVersionId], references: [id])
  other_ai_content_versions ai_content_versions[]    @relation("ai_content_versionsToai_content_versions")
  content_quality_scores    content_quality_scores[]

  @@unique([contentId, versionNumber])
  @@index([contentId])
}

model ai_feedback {
  id               String         @id
  aiGenerationId   String
  tenantId         String
  feedbackType     String
  rating           Int?
  comments         String?
  suggestions      String?
  wasUseful        Boolean?
  improvementNotes String?
  createdAt        DateTime       @default(now())
  ai_generations   ai_generations @relation(fields: [aiGenerationId], references: [id], onDelete: Cascade)

  @@index([aiGenerationId])
  @@index([tenantId, feedbackType])
}

model ai_generation_sessions {
  id               String     @id
  contentId        String
  userId           String
  sessionStart     DateTime   @default(now())
  sessionEnd       DateTime?
  totalDuration    Int?
  actionsCount     Int        @default(0)
  generationsCount Int        @default(0)
  critiquesCount   Int        @default(0)
  finalOutcome     String?
  sessionMetadata  Json       @default("{}")
  ai_content       ai_content @relation(fields: [contentId], references: [id])

  @@index([contentId])
  @@index([userId, sessionStart])
}

model ai_generations {
  id              String        @id
  tenantId        String
  postId          String?
  provider        String
  model           String
  promptType      String
  prompt          String
  response        String
  tokensUsed      Int?
  cost            Decimal?      @db.Decimal(10, 6)
  createdAt       DateTime      @default(now())
  contentType     String        @default("generation")
  editsByUser     String?
  isUsed          Boolean       @default(false)
  performanceData Json          @default("{}")
  status          String        @default("generated")
  usedInPostId    String?
  userFeedback    String?
  userRating      Int?
  ai_feedback     ai_feedback[]

  @@index([tenantId, contentType, status])
  @@index([tenantId, createdAt])
  @@index([tenantId, provider])
}

model ai_instruction_history {
  id              String     @id
  contentId       String
  versionId       String?
  instructionType String?
  instructionText String
  appliedAt       DateTime?
  createdBy       String?
  createdAt       DateTime   @default(now())
  ai_content      ai_content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@index([contentId])
}

model ai_learning_patterns {
  id                String    @id
  tenantId          String
  userId            String?
  patternType       String
  pattern           Json
  confidence        Float
  usageCount        Int       @default(0)
  successRate       Float?
  context           Json      @default("{}")
  exampleContentIds String[]
  negativeExamples  String[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime
  lastUsed          DateTime?
  tenants           tenants   @relation(fields: [tenantId], references: [id])

  @@index([confidence])
  @@index([tenantId, patternType])
}

model ai_usage {
  id         String   @id
  userId     String
  provider   String
  action     String
  tokensUsed Int      @default(0)
  metadata   Json     @default("{}")
  createdAt  DateTime @default(now())

  @@index([userId, createdAt])
  @@index([userId, provider])
}

model api_keys {
  id           String    @id
  provider     String
  encryptedKey String
  isActive     Boolean   @default(true)
  usageCount   Int       @default(0)
  lastUsed     DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime
  keyHash      String
  name         String
  userId       String
}

model blog_ideas {
  id                String   @id
  tenantId          String
  title             String
  description       String
  category          String?
  tags              String[]
  priority          String   @default("medium")
  status            String   @default("idea")
  source            String   @default("manual")
  aiPrompt          String?
  publishedPostId   String?
  userNotes         String?
  seasonality       String?
  targetAudience    String?
  estimatedReadTime Int?
  keywords          String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime

  @@index([tenantId, createdAt])
  @@index([tenantId, priority])
  @@index([tenantId, status])
}

model categories {
  id              String            @id
  name            String
  slug            String
  description     String?
  tenantId        String
  color           String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  tenants         tenants           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  post_categories post_categories[]

  @@unique([slug, tenantId])
}

model content_performance_data {
  id                  String     @id
  aiContentId         String
  publishedPostId     String?
  generationParams    Json
  userModifications   Json
  performanceMetrics  Json
  attributionScore    Float?
  timeframe           String
  benchmarkComparison Json
  successFactors      String[]
  recordedAt          DateTime   @default(now())
  ai_content          ai_content @relation(fields: [aiContentId], references: [id])

  @@index([aiContentId])
  @@index([recordedAt])
}

model content_quality_scores {
  id                     String               @id
  contentId              String
  versionId              String?
  scoreType              String
  qualityDimensions      Json
  overallScore           Float
  confidenceScore        Float
  scoringReasons         String[]
  improvementSuggestions String[]
  comparativeRank        Int?
  scoredAt               DateTime             @default(now())
  scoredBy               String?
  ai_content             ai_content           @relation(fields: [contentId], references: [id])
  ai_content_versions    ai_content_versions? @relation(fields: [versionId], references: [id])

  @@index([contentId, scoreType])
  @@index([overallScore])
}

model content_workflow_state {
  id            String     @id
  contentId     String     @unique
  currentState  String
  stateHistory  Json
  blockers      String[]
  nextActions   String[]
  stateMetadata Json       @default("{}")
  updatedAt     DateTime
  ai_content    ai_content @relation(fields: [contentId], references: [id])

  @@index([currentState])
}

model feature_usage {
  id         String   @id
  tenantId   String
  feature    String
  usageCount Int      @default(0)
  lastUsed   DateTime @default(now())
  monthYear  String

  @@unique([tenantId, feature, monthYear])
}

model media {
  id           String       @id
  filename     String
  originalName String
  mimeType     String
  size         Int
  url          String
  path         String
  alt          String?
  caption      String?
  tenantId     String
  uploadedById String
  isPublic     Boolean      @default(false)
  metadata     Json         @default("{}")
  createdAt    DateTime     @default(now())
  updatedAt    DateTime
  tenants      tenants      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  users        users        @relation(fields: [uploadedById], references: [id])
  post_media   post_media[]

  @@index([tenantId, mimeType])
}

model post_categories {
  postId     String
  categoryId String
  createdAt  DateTime   @default(now())
  categories categories @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  posts      posts      @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
}

model post_media {
  postId  String
  mediaId String
  order   Int    @default(0)
  media   media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  posts   posts  @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([postId, mediaId])
}

model post_tags {
  postId    String
  tagId     String
  createdAt DateTime @default(now())
  posts     posts    @relation(fields: [postId], references: [id], onDelete: Cascade)
  tags      tags     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
}

model post_versions {
  id        String   @id
  postId    String
  content   String
  title     String
  version   Int
  createdAt DateTime @default(now())
  posts     posts    @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, version])
}

model posts {
  id              String            @id
  title           String
  slug            String
  content         String
  excerpt         String?
  status          PostStatus        @default(DRAFT)
  publishDate     DateTime?
  authorId        String
  tenantId        String
  featuredImage   String?
  metaDescription String?
  metaKeywords    String?
  readingTime     Int?
  viewCount       Int               @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  headline        String?
  subheadline     String?
  summary         String?
  post_categories post_categories[]
  post_media      post_media[]
  post_tags       post_tags[]
  post_versions   post_versions[]
  users           users             @relation(fields: [authorId], references: [id])
  tenants         tenants           @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([slug, tenantId])
  @@index([tenantId, authorId])
  @@index([tenantId, status, publishDate])
}

model tags {
  id        String      @id
  name      String
  slug      String
  tenantId  String
  useCount  Int         @default(0)
  createdAt DateTime    @default(now())
  updatedAt DateTime
  post_tags post_tags[]
  tenants   tenants     @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([slug, tenantId])
}

model tenants {
  id                   String                 @id
  name                 String
  domain               String                 @unique
  subdomain            String                 @unique
  config               Json                   @default("{}")
  storageConfig        Json                   @default("{}")
  planTier             String                 @default("starter")
  isActive             Boolean                @default(true)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  ai_content           ai_content[]
  ai_learning_patterns ai_learning_patterns[]
  categories           categories[]
  clubs                clubs[]
  media                media[]
  posts                posts[]
  tags                 tags[]
  testimonials         testimonials[]
  users                users[]
}

model user_content_preferences {
  id              String   @id
  userId          String
  preferenceType  String
  preferenceValue Json
  strength        Float
  context         Json     @default("{}")
  learnedFrom     String[]
  updatedAt       DateTime
  createdAt       DateTime @default(now())

  @@index([userId, preferenceType])
}

model users {
  id           String       @id
  email        String
  name         String
  passwordHash String?
  role         Role         @default(EDITOR)
  tenantId     String
  isActive     Boolean      @default(true)
  lastLogin    DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime
  ai_content   ai_content[]
  media        media[]
  posts        posts[]
  tenants      tenants      @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([email, tenantId])
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ARCHIVED
  TRASH
}

model testimonials {
  id        String   @id
  name      String
  text      String
  rating    Int      @default(5)
  image     String?
  tenantId  String
  createdAt DateTime @default(now())
  updatedAt DateTime
  tenants   tenants  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
}

model clubs {
  id              String   @id
  name            String
  location        Json     // city, province, address, directions, coordinates
  contactInfo     Json     // phone, email, website, instagram
  courtDetails    Json     // indoorCourts, outdoorCourts, lightingAvailable, surfaceType
  playInfo        Json     // openPlay, openPlaySchedule, reservationRequired, courtFees
  amenities       String[]
  images          String[]
  description     String?
  listingType     String   // 'featured' or 'basic'
  upcomingEvents  String[]
  tenantId        String
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  tenants         tenants  @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
}

enum Role {
  SUPER_ADMIN
  ADMIN
  EDITOR
  VIEWER
}
